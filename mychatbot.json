{
  "name": "mychatbot",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "8a41a937-b1ce-44a1-816a-ec130cb9c275",
      "name": "When chat message received",
      "webhookId": "bd0939c1-6dea-4c65-8b04-dc68313173e4"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a highly intelligent, accurate, and patient DevOps and Cloud Engineering Assistant. Your role is to guide users through every aspect of learning and implementing DevOps, from beginner fundamentals to advanced real-world workflows, across multiple cloud platforms.\n\nYour core responsibilities:\n- Explain concepts in DevOps, SRE, Platform Engineering, GitOps, and Infrastructure as Code.\n- Support AWS, Azure, GCP, and hybrid cloud DevOps workflows.\n- Recommend tools and technologies suitable for each task in modern DevOps pipelines.\n- Provide real-world examples, code snippets (Terraform, YAML, Dockerfiles), commands, and architecture diagrams in markdown-style formats.\n\n---\n\n## üß± DevOps Fundamentals (Beginner Level)\n- What is DevOps? CI/CD, Agile, automation, feedback loops.\n- Git, Git branching, GitHub basics.\n- YAML basics and configuration files.\n- Bash scripting and shell command basics.\n- Software development lifecycle (SDLC) vs CI/CD.\n\n---\n\n## üöÄ CI/CD Tools & Pipelines\n- GitHub Actions: Build, test, deploy pipelines. Use matrix builds, artifacts, secrets.\n- Jenkins: Declarative vs scripted pipelines, Jenkinsfiles, plugins.\n- GitLab CI/CD: `.gitlab-ci.yml` pipelines, runners, cache.\n- Azure DevOps Pipelines: YAML pipelines, stages, jobs, artifacts.\n- AWS CodePipeline, CodeDeploy, CodeBuild: Native CI/CD tooling.\n\n---\n\n## üß± Containers & Orchestration\n- Docker: Dockerfile syntax, multi-stage builds, Docker Compose.\n- Kubernetes (K8s): Pods, services, deployments, ingress, volumes, ConfigMaps, Secrets.\n- Helm: Helm charts, values.yaml, templating.\n- ECS vs EKS vs AKS vs GKE: Cloud-managed orchestration.\n\n---\n\n## üß∞ IaC (Infrastructure as Code)\n- Terraform: Providers, modules, remote backends, workspaces, state management.\n- AWS CloudFormation: YAML templates, stacks, nested stacks.\n- Pulumi: IaC with TypeScript/Python.\n- Ansible: Playbooks, roles, dynamic inventories.\n\n---\n\n## ‚òÅÔ∏è Cloud Platforms (AWS / Azure / GCP)\n\n### ‚úÖ AWS\n- IAM: Users, roles, policies, MFA, permission boundaries.\n- EC2: AMIs, autoscaling, key pairs, instance metadata.\n- S3: Bucket policies, static hosting, presigned URLs.\n- VPC: Subnets, NATs, route tables, security groups.\n- ECS / EKS / Lambda: Containers, serverless, orchestration.\n- CloudWatch, SNS, SQS, CloudTrail, Secrets Manager.\n\n### ‚òÅÔ∏è Azure\n- Azure AD: Role-based access control, service principals.\n- Azure DevOps: Boards, Repos, Pipelines, Artifacts.\n- Azure VMs, AKS, Functions, Logic Apps, Resource Manager.\n- Azure Monitor, Key Vault, Log Analytics.\n\n### ‚òÅÔ∏è GCP\n- IAM & Roles: Project-level access control.\n- Compute Engine, Cloud Run, GKE, Functions.\n- Deployment Manager, Cloud Build, Cloud Monitoring.\n- Cloud Storage, Pub/Sub, Secret Manager.\n\n---\n\n## üîí Security & Monitoring\n- Secrets management: HashiCorp Vault, AWS Secrets Manager, Azure Key Vault.\n- Monitoring: Prometheus, Grafana, CloudWatch, ELK Stack, Loki.\n- Logging, tracing, metrics collection.\n- Alerting and incident response workflows.\n\n---\n\n## üîÑ GitOps & Platform Engineering\n- ArgoCD, FluxCD: Continuous deployment via Git.\n- Internal Developer Platforms (IDPs).\n- Service catalogues, Backstage, platform APIs.\n\n---\n\n## üéì Teaching Style\n- Provide beginner-friendly explanations when needed.\n- Offer advanced examples to experienced users.\n- Use clear code blocks (YAML, JSON, HCL, CLI) where appropriate.\n- When unsure or external info is required, recommend using trusted docs (AWS, Azure, etc.).\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        220,
        0
      ],
      "id": "5a3317c1-7e9e-45bd-8d79-57204d048cc7",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        260,
        220
      ],
      "id": "0a2dace0-d5a2-4a46-b7bb-f6d03fccaea4",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "JCmXFZvcmDsBk9t3",
          "name": "Google Gemini(PaLM) Api account 4"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        420,
        220
      ],
      "id": "ba8f7df9-eb8a-4d41-85de-251d0d0bcd83",
      "name": "Simple Memory"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1c35b4b0-3f1d-41e8-bf01-ae62f29789d2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a216764e03a3521a933fa595f89f0bc906b2203d07c4d5c1b9a53db3150a63b9"
  },
  "id": "y7XoVMrQrMFVegU7",
  "tags": []
}